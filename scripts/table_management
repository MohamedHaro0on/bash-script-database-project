#!/usr/bin/bash

source ../configs/config
source ./utils

create_table() {
    echo -e "\nCreate Table"
    echo "============================================== "
    echo $DB_NAME 
    # Check database existence
    check_db_exists || return  # returns 1 if database does not exist
    
    # Get and validate table name
    while true; do
        read -p "Enter table name: " table_name
        if ! validate_table_name "$table_name"; then
            continue
        fi
        if check_table_exists "$table_name"; then
            echo "Error: Table already exists!"
            continue
        fi
        break
    done
    
    # Create table structure
    if ! mkdir "$ACTIVE_DB_PATH/$table_name" 2>/dev/null; then
        echo "Error: Failed to create table directory"
        return 1
    fi
    touch "$ACTIVE_DB_PATH/$table_name/metadata"
    touch "$ACTIVE_DB_PATH/$table_name/data"
    
    # Get column count
    while true; do
        read -p "Enter number of columns: " col_count
        if validate_number "$col_count" 1 100; then
            break
        fi
    done
    
    # Get column details
    metadata=""
    # Primary Key Check
    pk=0
    for ((i=1; i<=$col_count; i++)); 
    do
        # Get and validate column name
        while true; do
            read -p "Enter name for column $i: " col_name
            if validate_column_name "$col_name"; then
                break
            fi
        done
        
        # Display data types
        echo -e "\nAvailable data types:"
        for ((j=0; j<${#SUPPORTED_DATATYPES[@]}; j++)); do
            echo "$((j+1))) ${SUPPORTED_DATATYPES[j]}"
        done
        
        # Get data type
        while true; do
            read -p "Select data type for $col_name (1-${#SUPPORTED_DATATYPES[@]}): " type_choice
            if validate_number "$type_choice" 1 ${#SUPPORTED_DATATYPES[@]}; then
                selected_type=${SUPPORTED_DATATYPES[$((type_choice-1))]}
                break
            fi
        done
       # Check if this column should be the primary key
        if [ $pk -eq 0 ]
        then
        	read -p "Do you Want to make $col_name Primary Key (y/n): " checkPk
        	if [[ $checkPk = "y" ]]
        	then
        		metadata+="$col_name:$selected_type:PK"
        		pk=1
        	else
        		metadata+="$col_name:$selected_type"
        	fi
        else
            metadata+="$col_name:$selected_type"
        fi    
        
        if [ $i -ne $col_count ]
        then
        	metadata+=","
        fi
    done
    
    # Ensure at least one PK is set
    if [ $pk -eq 0 ]; then
    	echo "Error: At least one column must be set as a Primary Key."
    	return 1
    fi
    
    # Save metadata
    echo "$metadata" > "$ACTIVE_DB_PATH/$table_name/metadata"
    echo "Table '$table_name' created successfully!"
}

list_tables() {
    echo -e "\nList Tables"
    echo "============================================== "
    
    # Check database existence
    check_db_exists || return 1
    
    # Display tables
    local table_count=0
    echo "CHECK:$ACTIVE_DB_PATH"
    pwd

    for table in "$ACTIVE_DB_PATH"/* ; do
        if [ -d "$table" ] && [ -f "$table/metadata" ]; then
            ((table_count++))
            table_name=$(basename "$table")
            
            if [ -f "$table/metadata" ]; then
                metadata=$(cat "$table/metadata")
                records_count=$(wc -l < "$table/data" 2>/dev/null || echo 0)
                
                echo -e "\nTable: $table_name"
                echo "Records: $records_count"
                echo "Columns:"
                
                IFS=',' read -ra COLUMNS <<< "$metadata"
                for column in "${COLUMNS[@]}"; do
                    IFS=':' read -ra COL_INFO <<< "$column"
                    printf "  %-20s %-10s\n" "${COL_INFO[0]}" "${COL_INFO[1]}"
                done
                echo "------------------------"
            else
                echo "Table '$table_name' (metadata not found)"
            fi
        fi
    done
    
    if [ $table_count -eq 0 ]; then
        echo "No tables found"
        return 1
    fi
    
    echo -e "\nTotal tables: $table_count"
}

drop_table() {
    echo -e "\nDrop Table"
    echo "============================================== "
    
    # Check database and display tables
    check_db_exists || return 1
    display_tables || return 1
    
    # Get table selection
    while true; do
        read -p $'\nEnter table number to drop (or 0 to cancel): ' choice
        
        if [ "$choice" -eq 0 ]; then
            echo "Operation cancelled"
            return 0
        fi
        
        if validate_number "$choice" 1 ${#table_names[@]}; then
            selected_table=${table_names[$choice]}
            break
        fi
    done
    
    # Confirm and execute
    if confirm_action "Are you sure you want to drop table '$selected_table'?"; then
        if rm -r "$ACTIVE_DB_PATH/$selected_table" 2>/dev/null; then
            echo "Table '$selected_table' dropped successfully"
        else
            echo "Error dropping table '$selected_table'"
            return 1
        fi
    fi
}

rename_table() {
    echo -e "\nRename Table"
    echo "============================================== "
    
    # Check database and display tables
    check_db_exists || return 1
    display_tables || return 1
    
    # Get table selection
    while true; do
        read -p $'\nEnter table number to rename (or 0 to cancel): ' choice
        
        if [ "$choice" -eq 0 ]; then
            echo "Operation cancelled"
            return 0
        fi
        
        if validate_number "$choice" 1 ${#table_names[@]}; then
            selected_table=${table_names[$choice]}
            break
        fi
    done
    
    # Get new name
    while true; do
        read -p "Enter new table name: " new_table_name
        if ! validate_table_name "$new_table_name"; then
            continue
        fi
        if check_table_exists "$new_table_name"; then
            echo "Error: Table '$new_table_name' already exists"
            continue
        fi
        break
    done
    
    # Confirm and execute
    if confirm_action "Rename table '$selected_table' to '$new_table_name'?"; then
        if mv "$ACTIVE_DB_PATH/$selected_table" "$ACTIVE_DB_PATH/$new_table_name" 2>/dev/null; then
            echo "Table renamed successfully"
            echo "'$selected_table' â†’ '$new_table_name'"
        else
            echo "Error renaming table"
            return 1
        fi
    fi
}

insert_into_table(){
echo -e "\n Insert Into Table"
echo "============================"

# Ensure An Active DataBase is selected
if [[ -z "$ACTIVE_DB_PATH" ]]
then
	echo "No Database Selected! Please Connect To a Database First."
	return 1
fi

# Get List Of Tables
local tables=($(ls "$ACTIVE_DB_PATH")) # Store tables in an array

if [[ ${#tables[@]} -eq 0 ]]
then
	echo "No Tables Found in Database $ACTIVE_DB_PATH"
	return 1
fi


# Display Tables
echo -e "\n Available Tables: "
local index=1
for table in "${tables[@]}"
do
	echo "$index) $table"
	((index++))
done

# Get User Selection
while true
do
	read -p $'\n Select Table Number To Insert into (or 0 To Cancel) : ' choice
	if [[ $choice -eq 0 ]] 
	then
		echo "Operation Cancelled"
		return 0
	fi
	if [[ $choice -ge 1 && $choice -le ${#tables[@]} ]]
	then
		selected_table="${tables[$((choice-1))]}"
		break
	else
		echo "Inavlid Selection. Please,Enter a Number Between 1 & ${#tables[@]}"
	fi
done
# Read Metadata file

# Metadata file path
metadata_file=$ACTIVE_DB_PATH/$selected_table/metadata
#echo "DEBUG: ACTIVE_DB_PATH -> '$ACTIVE_DB_PATH'"
#echo "DEBUG: selected_table -> '$selected_table'"
#echo "DEBUG: Checking metadata file at: $metadata_file"  # Debug line
if [[ ! -f $metadata_file ]] 
then
	echo "Error:Metadata File For Table $selected_table not found!"
	return 1
fi

# Read Column Definitions From Metadata
IFS=',' read -ra COLUMNS < "$metadata_file"

if [[ ${#COLUMNS[@]} -eq 0 ]] 
then
	echo "Error : No Columns Found in metadata!"
	return 1
fi

#Collect Values For Each Column
new_record=""
echo -e "\nEnter Values For Each Column:"

for column in ${COLUMNS[@]}
do
	IFS=":" read -r col_name col_type <<< "$column" # Extract column name & type
	while true
	do
		read -p "$col_name ($col_type): " value
		# Validate Value Based On Type
		if validate_data_type "$value" "$col_type" 
		then
			break
		else
			echo "Invalid Input! Expected type : $col_type."
		fi
	done
	
	# Build The New Record (colon-separated values)
	if [[ -z "$new_record" ]]
	then
		new_record="$value"
	else
		new_record="$new_record:$value"
	fi
done
# Append The New Record To The Table's data file
data_file="$ACTIVE_DB_PATH/$selected_table/data"

if echo "$new_record" >> "$data_file"
then
	echo -e "\n Record Inserted Successfully!"
else
	echo "Error Inserting Record!"
	return 1 
fi
}	 
