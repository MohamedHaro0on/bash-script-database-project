#!/usr/bin/bash

source ../configs/config
source ./utils

create_table() {
    echo -e "\nCreate Table"
    echo "============================================== "
    echo $DB_NAME 
    # Check database existence
    check_db_exists || return  # returns 1 if database does not exist
    
    # Get and validate table name
    while true; do
        read -p "Enter table name: " table_name
        if ! validate_table_name "$table_name"; then
            continue
        fi
        if check_table_exists "$table_name"; then
            echo "Error: Table already exists!"
            continue
        fi
        break
    done
    
    # Create table structure
    if ! mkdir "$DB_PATH/$table_name" 2>/dev/null; then
        echo "Error: Failed to create table directory"
        return 1
    fi
    touch "$DB_PATH/$table_name/metadata"
    touch "$DB_PATH/$table_name/data"
    
    # Get column count
    while true; do
        read -p "Enter number of columns: " col_count
        if validate_number "$col_count" 1 100; then
            break
        fi
    done
    
    # Get column details
    metadata=""
    for ((i=1; i<=$col_count; i++)); do
        # Get and validate column name
        while true; do
            read -p "Enter name for column $i: " col_name
            if validate_column_name "$col_name"; then
                break
            fi
        done
        
        # Display data types
        echo -e "\nAvailable data types:"
        for ((j=0; j<${#SUPPORTED_DATATYPES[@]}; j++)); do
            echo "$((j+1))) ${SUPPORTED_DATATYPES[j]}"
        done
        
        # Get data type
        while true; do
            read -p "Select data type for $col_name (1-${#SUPPORTED_DATATYPES[@]}): " type_choice
            if validate_number "$type_choice" 1 ${#SUPPORTED_DATATYPES[@]}; then
                selected_type=${SUPPORTED_DATATYPES[$((type_choice-1))]}
                break
            fi
        done
        
        # Build metadata string
        if [ $i -eq $col_count ]; then
            metadata+="$col_name:$selected_type"
        else
            metadata+="$col_name:$selected_type,"
        fi
    done
    
    # Save metadata
    echo "$metadata" > "$DB_PATH/$table_name/metadata"
    echo "Table '$table_name' created successfully!"
}

list_tables() {
    echo -e "\nList Tables"
    echo "============================================== "
    
    # Check database existence
    check_db_exists || return 1
    
    # Display tables
    local table_count=0
    for table in "$DB_PATH"/*/ ; do
        if [ -d "$table" ]; then
            ((table_count++))
            table_name=$(basename "$table")
            
            if [ -f "$table/metadata" ]; then
                metadata=$(cat "$table/metadata")
                records_count=$(wc -l < "$table/data" 2>/dev/null || echo 0)
                
                echo -e "\nTable: $table_name"
                echo "Records: $records_count"
                echo "Columns:"
                
                IFS=',' read -ra COLUMNS <<< "$metadata"
                for column in "${COLUMNS[@]}"; do
                    IFS=':' read -ra COL_INFO <<< "$column"
                    printf "  %-20s %-10s\n" "${COL_INFO[0]}" "${COL_INFO[1]}"
                done
                echo "------------------------"
            else
                echo "Table '$table_name' (metadata not found)"
            fi
        fi
    done
    
    if [ $table_count -eq 0 ]; then
        echo "No tables found"
        return 1
    fi
    
    echo -e "\nTotal tables: $table_count"
}

drop_table() {
    echo -e "\nDrop Table"
    echo "============================================== "
    
    # Check database and display tables
    check_db_exists || return 1
    display_tables || return 1
    
    # Get table selection
    while true; do
        read -p $'\nEnter table number to drop (or 0 to cancel): ' choice
        
        if [ "$choice" -eq 0 ]; then
            echo "Operation cancelled"
            return 0
        fi
        
        if validate_number "$choice" 1 ${#table_names[@]}; then
            selected_table=${table_names[$choice]}
            break
        fi
    done
    
    # Confirm and execute
    if confirm_action "Are you sure you want to drop table '$selected_table'?"; then
        if rm -r "$DB_PATH/$selected_table" 2>/dev/null; then
            echo "Table '$selected_table' dropped successfully"
        else
            echo "Error dropping table '$selected_table'"
            return 1
        fi
    fi
}

rename_table() {
    echo -e "\nRename Table"
    echo "============================================== "
    
    # Check database and display tables
    check_db_exists || return 1
    display_tables || return 1
    
    # Get table selection
    while true; do
        read -p $'\nEnter table number to rename (or 0 to cancel): ' choice
        
        if [ "$choice" -eq 0 ]; then
            echo "Operation cancelled"
            return 0
        fi
        
        if validate_number "$choice" 1 ${#table_names[@]}; then
            selected_table=${table_names[$choice]}
            break
        fi
    done
    
    # Get new name
    while true; do
        read -p "Enter new table name: " new_table_name
        if ! validate_table_name "$new_table_name"; then
            continue
        fi
        if check_table_exists "$new_table_name"; then
            echo "Error: Table '$new_table_name' already exists"
            continue
        fi
        break
    done
    
    # Confirm and execute
    if confirm_action "Rename table '$selected_table' to '$new_table_name'?"; then
        if mv "$DB_PATH/$selected_table" "$DB_PATH/$new_table_name" 2>/dev/null; then
            echo "Table renamed successfully"
            echo "'$selected_table' â†’ '$new_table_name'"
        else
            echo "Error renaming table"
            return 1
        fi
    fi
}

insert_into_table() {
    echo -e "\nInsert Into Table"
    echo "============================================== "
    
    # Check database and display tables
    check_db_exists || return 1
    display_tables || return 1
    
    # Get table selection
    while true; do
        read -p $'\nSelect table number to insert into (or 0 to cancel): ' choice
        
        if [ "$choice" -eq 0 ]; then
            echo "Operation cancelled"
            return 0
        fi
        
        if validate_number "$choice" 1 ${#table_names[@]}; then
            selected_table=${table_names[$choice]}
            break
        fi
    done
    
    # Read metadata
    metadata_file="$DB_PATH/$selected_table/metadata"
    IFS=',' read -ra COLUMNS <<< $(cat "$metadata_file")
    
    # Get values
    data_string=""
    echo -e "\nEnter values for each column:"
    for column in "${COLUMNS[@]}"; do
        IFS=':' read -ra COL_INFO <<< "$column"
        col_name=${COL_INFO[0]}
        col_type=${COL_INFO[1]}
        
        while true; do
            read -p "$col_name ($col_type): " value
            if validate_data_type "$value" "$col_type"; then
                break
            fi
        done
        
        # Build data string
        if [ -z "$data_string" ]; then
            data_string="$value"
        else
            data_string="$data_string:$value"
        fi
    done
    
    # Save record
    if echo "$data_string" >> "$DB_PATH/$selected_table/data"; then
        echo -e "\nRecord inserted successfully!"
    else
        echo -e "\nError inserting record!"
        return 1
    fi
}
